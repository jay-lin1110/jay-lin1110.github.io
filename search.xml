<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Express 框架的简单实现</title>
      <link href="/2020/02/17/express/"/>
      <url>/2020/02/17/express/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NestJS 实现认证授权功能</title>
      <link href="/2020/02/15/nestjs/"/>
      <url>/2020/02/15/nestjs/</url>
      
        <content type="html"><![CDATA[<h1 id="NestJS-实现认证授权功能"><a href="#NestJS-实现认证授权功能" class="headerlink" title="NestJS 实现认证授权功能"></a>NestJS 实现认证授权功能</h1><p><code>Passport</code>  是目前最流行的  <code>Node.js</code>  认证库 ，具有丰富的策略生态系统，可实施各种身份验证机制。</p><h2 id="本地身份认证"><a href="#本地身份认证" class="headerlink" title="本地身份认证"></a>本地身份认证</h2><p><code>Passport</code> 提供了  <code>Passport-local</code>  的本地身份认证策略，它实现了一种用户名/密码身份验证机制。客户端先使用用户名和密码进行身份验证，一旦通过身份验证，服务器将发出  <code>JWT</code>，该  <code>JWT</code>  可以在后续请求的授权头中作为  <code>token</code>发送，以验证身份验证。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i @nestjs/passport passport passport-local<span class="token function">npm</span> i -D @types/passport-local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="生成认证模块"><a href="#生成认证模块" class="headerlink" title="生成认证模块"></a>生成认证模块</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成认证模块</span>nest g mo auth<span class="token comment" spellcheck="true"># 生成认证控制器</span>nest g co auth<span class="token comment" spellcheck="true"># 生成认证服务</span>nest g s auth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>认证控制器非必需，你可以根据需求将认证模块使用到用户、管理员等其他模块中。</p></blockquote><h3 id="本地身份认证服务"><a href="#本地身份认证服务" class="headerlink" title="本地身份认证服务"></a>本地身份认证服务</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// auth.service.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  Injectable<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> InjectModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'nestjs-typegoose'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ReturnModelType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@typegoose/typegoose'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@app/mongo/models/user.model'</span><span class="token punctuation">;</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>    @<span class="token function">InjectModel</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token keyword">private</span> readonly userModel<span class="token punctuation">:</span> ReturnModelType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> User<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token keyword">async</span> <span class="token function">validateLocal</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> string<span class="token punctuation">,</span> password<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>user <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>password <span class="token operator">===</span> password<span class="token punctuation">)</span> <span class="token operator">?</span> user <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Tips：这里使用 <code>@typegoose/typegoose</code> 包注入用户模型提供用户服务，关于 <code>MongoDB</code> 模块的详细内容，请传送 <a href="https://jaylin1011.gitee.io/readme/nestjs/lib-mongo.html">MongoDB</a> 章节。此外，用户密码属于密码数据，需要额外加密处理，可以通过散列或 md5 等加密方式加密，并通过 <code>mongoose</code> 的模型设计加密码字段设置为非必要读取字段，在需要密码的时候在取出密码字段。</p></blockquote><h3 id="实现本地身份认证策略"><a href="#实现本地身份认证策略" class="headerlink" title="实现本地身份认证策略"></a>实现本地身份认证策略</h3><p>在 <code>auth</code> 文件夹下新建一个本地策略实现文件 <code>local.strategy.ts</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// local.strategy.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Strategy<span class="token punctuation">,</span> IStrategyOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'passport-local'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PassportStrategy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/passport'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  Injectable<span class="token punctuation">,</span>  BadRequestException<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../auth.service'</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LocalStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">PassportStrategy</span><span class="token punctuation">(</span>Strategy<span class="token punctuation">,</span> <span class="token string">'local-login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> readonly authService<span class="token punctuation">:</span> AuthService<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      usernameField<span class="token punctuation">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span>      passwordField<span class="token punctuation">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span> <span class="token keyword">as</span> IStrategyOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">async</span> <span class="token function">validate</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> string<span class="token punctuation">,</span> password<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">validateLocal</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">'用户名或密码错误！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置本地身份认证模块"><a href="#配置本地身份认证模块" class="headerlink" title="配置本地身份认证模块"></a>配置本地身份认证模块</h3><p>在 <code>auth.module.ts</code> 中导入 <code>passport</code> 模块，提供本地身份认证策略。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// auth.module.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./auth.controller'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PassportModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/passport'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> LocalStrategy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./local.strategy'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./auth.service'</span>@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  controllers<span class="token punctuation">:</span> <span class="token punctuation">[</span>AuthController<span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>PassportModule<span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>AuthService<span class="token punctuation">,</span> LocalStrategy<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建授权登录路由守卫"><a href="#构建授权登录路由守卫" class="headerlink" title="构建授权登录路由守卫"></a>构建授权登录路由守卫</h3><p>授权守卫在每个中间件之后执行，但在任何拦截器或管道之前执行，根据运行时出现的某些条件（例如权限，角色，访问控 p 制列表等）来确定给定的请求是否由路由处理程序处理。</p><p>在需要使用本地身份认证的控制器中使用授权登陆路由守卫，这里 <code>auth.controller.ts</code> 的用户登录为例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// auth.controller.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> UseGuards<span class="token punctuation">,</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> InjectModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'nestjs-typegoose'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ReturnModelType<span class="token punctuation">,</span> DocumentType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@typegoose/typegoose'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthGuard <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/passport'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@app/mongo/models/user.model'</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthController</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span>  @<span class="token function">UseGuards</span><span class="token punctuation">(</span><span class="token function">AuthGuard</span><span class="token punctuation">(</span><span class="token string">'local-login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      token<span class="token punctuation">:</span> <span class="token string">'这里将在下一步中使用 jwt 认证策略生成 token返回作为用户身份令牌'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JWT-认证"><a href="#JWT-认证" class="headerlink" title="JWT 认证"></a>JWT 认证</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i @nestjs/jwt passport-jwt<span class="token function">npm</span> i -D @types/passport-jwt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置-JWT-密钥"><a href="#配置-JWT-密钥" class="headerlink" title="配置 JWT 密钥"></a>配置 JWT 密钥</h3><p>官网学习文档建议我们将 <code>JWT</code> 密钥保存在配置文件中，我们可以结合环境变量和配置文件 <code>.env</code> 来配置 <code>JWT</code> 密钥。</p><pre class="line-numbers language-js"><code class="language-js"># <span class="token punctuation">.</span>env# JWT 密钥JWT_SECRET<span class="token operator">=</span>这里是你配置的密钥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Tips：关于配置和环境变量的详细内容，请传送<a href="https://jaylin1011.gitee.io/readme/nestjs/lib-config.html">配置和环境变量</a>章节。</p></blockquote><h3 id="库共享-JWT-模块"><a href="#库共享-JWT-模块" class="headerlink" title="库共享 JWT 模块"></a>库共享 JWT 模块</h3><p>在库 <code>common.module.ts</code> 中配置 <code>JWT</code> 全局共享模块，结合环境变量使用 <code>JWT</code> 密钥</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// libs/common.module.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Module<span class="token punctuation">,</span> Global <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CommonService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./common.service'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/config'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> JwtModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/jwt'</span>@<span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>    ConfigModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      isGlobal<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    JwtModule<span class="token punctuation">.</span><span class="token function">registerAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      useFactory<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        secret<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>JWT_SECRET      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>CommonService<span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>CommonService<span class="token punctuation">,</span> JwtModule<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CommonModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JWT-认证服务"><a href="#JWT-认证服务" class="headerlink" title="JWT 认证服务"></a>JWT 认证服务</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// auth.service.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  Injectable<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> InjectModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'nestjs-typegoose'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ReturnModelType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@typegoose/typegoose'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> JwtService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/jwt'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@app/mongo/models/user.model'</span><span class="token punctuation">;</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>    @<span class="token function">InjectModel</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token keyword">private</span> readonly userModel<span class="token punctuation">:</span> ReturnModelType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> User<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">private</span> readonly jwtService<span class="token punctuation">:</span> JwtService<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> user<span class="token punctuation">.</span>_id <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      token<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtService<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">async</span> <span class="token function">verifyJwt</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userModel<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user <span class="token operator">?</span> user <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-JWT-认证策略"><a href="#实现-JWT-认证策略" class="headerlink" title="实现 JWT 认证策略"></a>实现 JWT 认证策略</h3><p>在 <code>auth</code> 文件夹下新建一个 <code>JWT</code> 策略实现文件 <code>jwt.strategy.ts</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// jwt.strategy.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Strategy<span class="token punctuation">,</span> ExtractJwt<span class="token punctuation">,</span> StrategyOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'passport-jwt'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PassportStrategy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/passport'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../auth.service'</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JwtStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">PassportStrategy</span><span class="token punctuation">(</span>Strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> readonly authService<span class="token punctuation">:</span> AuthService<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      jwtFromRequest<span class="token punctuation">:</span> ExtractJwt<span class="token punctuation">.</span><span class="token function">fromAuthHeaderAsBearerToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      ignoreExpiration<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      secretOrKey<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>JWT_SECRET<span class="token punctuation">,</span>    <span class="token punctuation">}</span> <span class="token keyword">as</span> StrategyOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">async</span> <span class="token function">validate</span><span class="token punctuation">(</span>payload<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">verifyJwt</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-JWT-认证策略"><a href="#配置-JWT-认证策略" class="headerlink" title="配置 JWT 认证策略"></a>配置 JWT 认证策略</h3><p>在 <code>auth.module.ts</code> 中导入 <code>passport</code> 模块，提供 <code>JWT</code> 认证策略。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// auth.module.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./auth.controller'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./auth.service'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PassportModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/passport'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> LocalStrategy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./local.strategy'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> JwtStrategy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./jwt.strategy'</span>@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  controllers<span class="token punctuation">:</span> <span class="token punctuation">[</span>AuthController<span class="token punctuation">]</span><span class="token punctuation">,</span>  imports<span class="token punctuation">:</span> <span class="token punctuation">[</span>PassportModule<span class="token punctuation">]</span><span class="token punctuation">,</span>  providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>AuthService<span class="token punctuation">,</span> LocalStrategy<span class="token punctuation">,</span> JwtStrategy<span class="token punctuation">]</span><span class="token punctuation">,</span>  exports<span class="token punctuation">:</span> <span class="token punctuation">[</span>JwtStrategy<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建授权访问路由守卫"><a href="#构建授权访问路由守卫" class="headerlink" title="构建授权访问路由守卫"></a>构建授权访问路由守卫</h3><p>用户登录成功后，使用 <code>JWT</code> 验证策略根据密钥和部分非敏感用户信息签署生成令牌 <code>token</code>，每次有效请求都必须携带该令牌，以此保护我们的接口。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// auth.controllers.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  Controller<span class="token punctuation">,</span>  Get<span class="token punctuation">,</span>  Post<span class="token punctuation">,</span>  Body<span class="token punctuation">,</span>  UseGuards<span class="token punctuation">,</span>  Req<span class="token punctuation">,</span>  Injectable<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./dto/auth.dto'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthGuard <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/passport'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./auth.service'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ApiBearerAuth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/swagger'</span><span class="token punctuation">;</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthController</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> readonly authService<span class="token punctuation">:</span> AuthService<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span>  @<span class="token function">UseGuards</span><span class="token punctuation">(</span><span class="token function">AuthGuard</span><span class="token punctuation">(</span><span class="token string">'local-login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> body<span class="token punctuation">:</span> AuthDto<span class="token punctuation">,</span> @<span class="token function">Req</span><span class="token punctuation">(</span><span class="token punctuation">)</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>user<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  @<span class="token function">ApiBearerAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  @<span class="token function">UseGuards</span><span class="token punctuation">(</span><span class="token function">AuthGuard</span><span class="token punctuation">(</span><span class="token string">'jwt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">'profile'</span><span class="token punctuation">)</span>  <span class="token function">profile</span><span class="token punctuation">(</span>@<span class="token function">Req</span><span class="token punctuation">(</span><span class="token punctuation">)</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>user<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      code<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>      username<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用<code>@ApiBearerAuth()</code> 装饰器可以让我们测试接口的时候在请求头中携带 <code>token</code> 令牌，当然，你也可以在 <code>main.ts</code> 中初始化 <code>swagger</code> 时候进行配置。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> NestJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> NestJS </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 组件间通信的 8 种方式</title>
      <link href="/2020/02/15/vue-components/"/>
      <url>/2020/02/15/vue-components/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js-组件间通信的-8-种方式"><a href="#Vue-js-组件间通信的-8-种方式" class="headerlink" title="Vue.js 组件间通信的 8 种方式"></a>Vue.js 组件间通信的 8 种方式</h1><h2 id="Plan-1：props"><a href="#Plan-1：props" class="headerlink" title="Plan 1：props"></a>Plan 1：<code>props</code></h2><p><img src="/medias/img/vuejs/event-props.jpg" alt=""></p><ol><li><p>Step 1</p><p>父组件通过 <code>v-bind</code> 指令绑定自定义属性 <code>prop-name</code> 向子组件传递数据</p><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div>    {{ value }}    <demo-child :parent-value="value"></demo-child>  </div></template><script>import DemoChild from './demo-child'export default {  name: 'DemoParent',  data() {    return {      value: `parent's value`    }  },  components: {    DemoChild  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>HTML</code> 中的 <code>attribute</code> 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。当你使用 <code>DOM</code> 中的模板时，<code>camelCase</code> (驼峰命名法) 的 <code>prop</code> 名需要使用其等价的 <code>kebab-case</code> (短横线分隔命名) 命名。如果你使用字符串模板，这个限制就不存在。 这里为了统一风格，<code>template</code>中使用 <code>kebab-case</code> 命名，<code>script</code> 中使用 <code>camelCase</code> 命名。</p></blockquote></li><li><p>Step 2</p><p>子组件通过 <code>props</code> 属性接收父组件数据</p><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div>    {{ childValue }}  </div></template><script>export default {  name: 'DemoChild',  props: {    parentValue: {      type: String    }  },  data() {    return {      childValue: this.parentValue    }  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>若 <code>prop-name</code> 类型是对象或数组，默认值必须从一个工厂函数获取 。</p><p>若子组件希望将 <code>prop-name</code> 其作为一个本地数据来使用，最好定义一个本地的 <code>data</code> 属性并将其用作初始值。</p><p>若 <code>prop-name</code> 以一种原始值传入且需要进行转换，最好用其来定义一个计算属性。</p></blockquote></li></ol><h2 id="Plan-2：-emit"><a href="#Plan-2：-emit" class="headerlink" title="Plan 2：$emit"></a>Plan 2：<code>$emit</code></h2><h3 id="使用-emit"><a href="#使用-emit" class="headerlink" title="使用 $emit"></a>使用 <code>$emit</code></h3><p>使用自定义事件，子组件可以通过 <code>$emit</code> 通知父组件改变值。</p><ol><li><p>Step 1</p><p>父组件通过 <code>v-bind</code> 指令绑定自定义属性 <code>prop-name</code> 向子组件传递数据，同时通过 <code>v-on</code> 给子组件订阅对应的事件监听。</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class="">    {{ parentValue.name }}    <!-- 相当于 this.$on('on-change', handleChange) -->    <demo-child      :parent-value="parentValue"      @on-change="handleChange"    ></demo-child>  </div></template><script>import DemoChild from './demo-child'export default {  name: 'DemoParent',  data() {    return {      parentValue: {        name: 'DemoParent'      }    }  },  methods: {    handleChange(newValue) {      this.parentValue = newValue    }  },  components: {    DemoChild  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>Step 2</p><p>子组件触发父组件事件监听，向父组件传递数据，父组件通过事件参数接收子组件的数据。</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class>    {{ childValue.name }}    <button @click="handleClick">按钮</button>  </div></template><script>export default {  name: 'DemoChild',  props: {    parentValue: {      type: Object,      default: () => ({})    }  },  data() {    return {      childValue: this.parentValue    }  },  methods: {    handleClick() {      this.childValue = {        name: 'DemoChild',        message: 'use $on to change parent'      }      this.$emit('on-change', this.childValue)    }  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不同于 <code>prop</code>，事件名不会被用作一个 <code>JavaScript</code> 变量名或属性名，所以没有理由使用 <code>camelCase</code> 或 <code>PascalCase</code> 了， <code>v-on</code> 事件监听器在 <code>DOM</code> 模板中会被自动转换为全小写 ，所以事件名始终使用始终使用 <code>kebab-case</code> 。</p></blockquote><h3 id="使用-sync-事件修饰符"><a href="#使用-sync-事件修饰符" class="headerlink" title="使用 .sync 事件修饰符"></a>使用 <code>.sync</code> 事件修饰符</h3><ol><li><p>Step 1</p><p>父组件使用 <code>.sync</code> 事件修饰符，作为一个下面代码的语法糖</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class="">    {{ parentValue.name }}    <!-- 相当于    <demo-child      :parent-value="parentValue"      @update:parent-value="newValue => { this.parentValue = newValue }"    ></demo-child>        -->    <demo-child :parent-value.sync="parentValue"></demo-child>  </div></template><script>import DemoChild from './demo-child'export default {  name: 'DemoParent',  data() {    return {      parentValue: {        name: 'DemoParent'      }    }  },  components: {    DemoChild  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>Step 2</p><p>子组件触发父组件事件监听，事件名遵循格式 「<code>update:prop-name</code>」</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class>    {{ childValue.name }}    <button @click="handleClick">按钮</button>  </div></template><script>export default {  name: 'DemoChild',  props: {    parentValue: {      type: Object,      default: () => ({})    }  },  data() {    return {      childValue: this.parentValue    }  },  methods: {    handleClick() {      this.childValue = {        name: 'DemoChild',        message: 'use $on to change parent'      }      this.$emit('update:parent-value', this.childValue)    }  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-v-model"><a href="#使用-v-model" class="headerlink" title="使用 v-model"></a>使用 <code>v-model</code></h3><ol><li><p>Step 1</p><p>父组件使用 <code>v-model</code> 指令，作为一个下面代码的语法糖</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class="">    {{ parentValue.name }}    <!-- 相当于    <demo-child      :value="parentValue"      @input="newValue => { this.parentValue = newValue }"    ></demo-child>        -->    <demo-child v-model="parentValue"></demo-child>  </div></template><script>import DemoChild from './demo-child'export default {  name: 'DemoParent',  data() {    return {      parentValue: {        name: 'DemoParent'      }    }  },  components: {    DemoChild  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>Step 2</p><p>子组件触发父组件事件监听，使用属性名 <code>value</code> 接收父组件数据，触发事件名 <code>input</code> 的 <code>v-model</code> 默认绑定事件</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class>    {{ childValue.name }}    <button @click="handleClick">按钮</button>  </div></template><script>export default {  name: 'DemoChild',  props: {    value: {      type: Object,      default: () => ({})    }  },  data() {    return {      childValue: this.value    }  },  methods: {    handleClick() {      this.childValue = {        name: 'DemoChild',        message: 'use $on to change parent'      }      this.$emit('input', this.childValue)    }  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Plan-3-parent-和-children"><a href="#Plan-3-parent-和-children" class="headerlink" title="Plan 3 $parent 和 $children"></a>Plan 3 <code>$parent</code> 和 <code>$children</code></h2><p><code>$parent</code> 和 <code>$children</code> 可以访问父组件和子组件，所以可以使用它们封装方法通知所有父组件和子组件。</p><ol><li><p>Step 1</p><p>在 <code>Vue</code> 的原型上添加公共方法，用于通知和更新。</p></li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js</span><span class="token comment" spellcheck="true">// 通知所有的父组件</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$dispatch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通知所有的子组件</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$broadcast <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> broadcast <span class="token operator">=</span> children <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      child<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>      child<span class="token punctuation">.</span>$children <span class="token operator">&amp;&amp;</span> <span class="token function">broadcast</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>$children<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>Step 2</p><p>在更深层级的子组件使用 <code>$dispatch()</code> 方法触发所有父组件</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div>    {{ value.name }}    <button @click="handleClick">按钮</button>  </div></template><script>export default {  name: 'GrandChild',  props: {    value: {      type: Object,      default: () => ({})    }  },  methods: {    handleClick() {      this.$dispatch('input', {        name: 'GrandChild'      })    }  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>Step 3</li></ol><p>在顶层的父组件使用 <code>$broadcast()</code> 方法通知所有子组件</p><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class="">    {{ parentValue.name }}    <demo-child v-model="parentValue"></demo-child>    <button      @click="        $broadcast('input', {          name: 'DemoParent'        })      "    >      按钮    </button>  </div></template><script>import DemoChild from './demo-child'export default {  name: 'DemoParent',  data() {    return {      parentValue: {        name: 'DemoParent'      }    }  },  components: {    DemoChild  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Plan-4-attrs-和-listeners"><a href="#Plan-4-attrs-和-listeners" class="headerlink" title="Plan 4 $attrs 和 $listeners"></a>Plan 4 <code>$attrs</code> 和 <code>$listeners</code></h2><p><code>$attrs</code> 包含了父作用域中不作为 <code>prop</code> 被识别 (且获取) 的特性绑定 (<code>class</code> 和 <code>style</code> 除外)。当一个组件没有声明任何 <code>prop</code> 时，可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件。</p><p><code>$listeners</code> 包含了父作用域中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器,可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件。</p><ol><li><p>Step 1</p><p>父组件通过 <code>v-bind=&quot;$attrs&quot;</code> 传入子组件</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class="">    {{ parentValue.name }}    <demo-child v-bind="$attrs" :value="parentValue"></demo-child>  </div></template><script>import DemoChild from './demo-child'export default {  name: 'DemoParent',  data() {    return {      parentValue: {        name: 'DemoParent'      }    }  },  components: {    DemoChild  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>Step 2</p><p>子组件通过 <code>$attrs</code> 接收父组件的数据</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class>    {{ $attrs.value.name }}  </div></template><script>export default {  name: 'DemoChild'}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Plan-5-provide-和-inject"><a href="#Plan-5-provide-和-inject" class="headerlink" title="Plan 5 provide 和 inject"></a>Plan 5 <code>provide</code> 和 <code>inject</code></h2><p><code>provide</code> 和 <code>inject</code> 需要一起使用，允许祖先组件向其所有子孙组件（不论组件层次有多深）注入一个依赖，并在其上下游关系成立的时间里始终生效。</p><blockquote><p><code>provide</code> 和 <code>inject</code> 主要在开发高阶插件/组件库时使用。并不推荐用于普通应用程序代码中。</p></blockquote><ol><li><p>Step 1</p><p>父组件通过 <code>provide&quot;</code> 提供依赖</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><script>export default {  name: 'DemoParent',  provide() {    return {      parent: this    }  },  data() {    return {      parentValue: {        name: 'DemoParent'      }    }  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>Step 2</p><p>子组件通过 <code>inject</code> 注入父组件提供的依赖</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div>    {{ this.parent.parentValue.name }}  </div></template><script>export default {  name: 'DemoChild'，  inject: ['parent'],}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Plan-6-refs"><a href="#Plan-6-refs" class="headerlink" title="Plan 6 $refs"></a>Plan 6 <code>$refs</code></h2><p>使用 <code>$refs</code> 通过子组件的引用来进行组件通信。</p><ol><li><p>Step 1</p><p>父组件给子组件添加 <code>ref</code> 属性，获取子组件引用。</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div>    <demo-child ref="child"></demo-child>  </div></template><script>import DemoChild from './demo-child'export default {  name: 'DemoParent',  mounted() {    this.$refs.child.print('parent')  },  components: {    DemoChild  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>Step 2</p><p>子组件提供给父组件访问的方法。</p></li></ol><pre class="line-numbers language-vue"><code class="language-vue"><script>export default {  name: 'DemoChild'，  methods: {    print(newValue) {      console.log(newValue)    }  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Plan-7-eventBus-全局事件总线"><a href="#Plan-7-eventBus-全局事件总线" class="headerlink" title="Plan 7 eventBus 全局事件总线"></a>Plan 7 <code>eventBus</code> 全局事件总线</h2><p><img src="/medias/img/vuejs/event-bus.jpg" alt=""></p><p>在全局注册一个 <code>Vue</code> 实例作为通信中心，通过 <code>$on</code> 订阅事件，通过 <code>$emit</code> 触发事件。</p><blockquote><p>全局事件总线的使用要格外注意事件的同名问题和事件的注册触发顺序，这与组件层级关系的先后顺序渲染有关。</p></blockquote><ol><li>Step 1<br>在全局注册一个可供所有组件访问的中央事件总线。</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Step 2<br>组件订阅监听事件。</li></ol><pre class="line-numbers language-vue"><code class="language-vue"><script>export default {  name: 'DemoParent'，  mounted() {    this.$bus.$on('event-name', (value) => {      console.log(value)    })  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>Step 3<br>组件通知触发事件。</li></ol><pre class="line-numbers language-vue"><code class="language-vue"><script>export default {  name: 'DemoChild'，  mounted() {    this.$nextTick(() => {      this.$bus.$emit('event-name', 'use $bus')    })  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Plan-8-Vuex"><a href="#Plan-8-Vuex" class="headerlink" title="Plan 8 Vuex"></a>Plan 8 <code>Vuex</code></h2><p><img src="/medias/img/vuejs/vuex.jpg" alt=""></p><blockquote><p><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener"><code>Vuex</code></a> 是一个专为 <code>Vue.js</code> 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<code>Vuex</code> 也集成到 <code>Vue</code> 的官方调试工具 <code>devtools extension</code>，提供了诸如零配置的 <code>time-travel</code> 调试、状态快照导入导出等高级调试功能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装基本公共样式工具类库</title>
      <link href="/2020/01/28/base-css/"/>
      <url>/2020/01/28/base-css/</url>
      
        <content type="html"><![CDATA[<p>使用 SASS 自定义封装一个类似于 Bootstrap 风格的基本可复用样式工具库，将常见的基本样式封装到一个统一的 base.css 文件中，提供对应的基本工具样式类</p><h1 id="基本公共样式工具库"><a href="#基本公共样式工具库" class="headerlink" title="基本公共样式工具库"></a>基本公共样式工具库</h1><p><img src="/medias/img/loading.gif" alt=""></p><p>在项目开发中，我们提前封装好一个基本的公共可复用的工具样式类文件，然后在项目的入口文件引入一次，就可以在整个项目中使用这些基础的公共样式类，避免多次写同样的基本样式。</p><p>比如，在 vue-cli 的脚手架项目中，我们可以在入口文件引入封装好的一个公共样式类，通常我们还会在这里引入对应的重置样式文件，<code>vue</code> 中中我们有 <code>webpack</code> 相关的 <code>loader</code> 帮我们处理编译打包 SASS 文件，所以不需要额外的处理。</p><p>如果你的项目支持 <code>SASS</code> 语法，那你可以直接使用 <code>SASS</code> 编写封装，这将提供极大的便利和良好的开发体验。</p><p>如果你的项目不支持 <code>SASS</code> 语法，那你可以使用 <code>SASS</code> 编写，再使用 <strong>VSCode</strong> 等编辑器相应的插件提前编译好 CSS 文件，再在项目中使用。</p><p>同理，微信小程序原生 Mina 框架并不支持 <code>SASS</code> 语法编写，同时文件也是自己原生框架生态系统的 <code>WXSS</code> 文件，我们可以使用插件将 <code>SASS</code> 文件编译为 <code>WXSS</code> 文件，然后在项目中使用。</p><p>如果你对 <code>SCSS</code> 语法不熟悉，可以使用 <a href="https://www.sasscss.com/" target="_blank" rel="noopener">SASS</a> 官网进行学习，<code>Sass</code> 是世界上最成熟、稳定、强大的专业级  CSS  扩展语言，可以帮助我们提供良好的样式开发体验。</p><p><img src="/medias/img/sass.jpg" alt=""></p><h2 id="基础样式工具类"><a href="#基础样式工具类" class="headerlink" title="基础样式工具类"></a>基础样式工具类</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>以字体样式为例子，字体样式通常包括字体的对齐方式、字体颜色、字体大小等基本样式，所以我们可以对这部分样式进行封装。这里，我们将使用 <code>SCSS</code> 语法，包括但不限于变量、循环、插值和集合等。</p><p>我们可以先定义部分主题相关或者常用的颜色变量。</p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$theme</span></span><span class="token punctuation">:</span> <span class="token hexcode">#d63246</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$white</span></span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$black</span></span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$dark</span></span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$gray</span></span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$gray-1</span></span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$colors</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>  <span class="token property">theme</span><span class="token punctuation">:</span> <span class="token variable">$theme</span>,  <span class="token property">white</span><span class="token punctuation">:</span> <span class="token variable">$white</span>,  <span class="token property">black</span><span class="token punctuation">:</span> <span class="token variable">$black</span>,  <span class="token property">dark</span><span class="token punctuation">:</span> <span class="token variable">$dark</span>,  <span class="token property">gray</span><span class="token punctuation">:</span> <span class="token variable">$gray</span>,  <span class="token property">gray-1</span><span class="token punctuation">:</span> <span class="token variable">$gray-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们借助 <code>SASS</code> 语法，通过循环和插值编译生成我们需要的字体样式工具类</p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$colorKey</span>, <span class="token variable">$color</span> in <span class="token variable">$colors</span> </span><span class="token punctuation">{</span>  <span class="token selector">.text-<span class="token variable">#{$colorKey}</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 <code>SASS</code> 代码定义了我们字体颜色相关的样式工具类，编译后生成的 CSS 样式文件如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.text-theme</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#d63246</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-white</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-black</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-dark</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-gray</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-gray-1</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，我们可以生成背景颜色相关的文件。</p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$colorKey</span>, <span class="token variable">$color</span> in <span class="token variable">$colors</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// text color</span>  <span class="token selector">.text-<span class="token variable">#{$colorKey}</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// background color</span>  <span class="token selector">.bgc-<span class="token variable">#{$colorKey}</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后样式文件如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.text-theme</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#d63246</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.bgc-theme</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#d63246</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-white</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.bgc-white</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-black</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.bgc-black</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-dark</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.bgc-dark</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-gray</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.bgc-gray</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在我们的 <code>html</code> 文件中或组件中使用字体基本样式工具类。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bgc-gray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-theme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-dark<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以定义更多字体相关的样式，比如字体的大小，字体的对齐方式等等。我们可以设置基础的字体大小，根据倍数计算出不同大小、不同级别的样式。</p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$align</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>left, right, center<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$value</span> in <span class="token variable">$align</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// text align</span>  <span class="token selector">.text-<span class="token variable">#{$value}</span> </span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 基本字体大小</span><span class="token property"><span class="token variable">$base-font-size</span></span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 字体大小的倍数规格</span><span class="token property"><span class="token variable">$font-sizes</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>  <span class="token property">xs</span><span class="token punctuation">:</span> <span class="token number">0.5</span>,  <span class="token property">sm</span><span class="token punctuation">:</span> <span class="token number">0.75</span>,  <span class="token property">md</span><span class="token punctuation">:</span> <span class="token number">1</span>,  <span class="token property">lg</span><span class="token punctuation">:</span> <span class="token number">1.25</span>,  <span class="token property">xl</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$sizeKey</span>, <span class="token variable">$size</span> in <span class="token variable">$font-sizes</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// font size</span>  <span class="token selector">.fs-<span class="token variable">#{$sizeKey}</span> </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$size</span> <span class="token operator">*</span> <span class="token variable">$base-font-size</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>我们可以定义 flex 布局相关的样式，包括方向、布局方式、主轴排列方式、交叉轴排列方式等。</p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// flex布局</span><span class="token selector">.d-flex </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// flex主轴方向</span><span class="token selector">.flex-column </span><span class="token punctuation">{</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token property"><span class="token variable">$jc</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>  <span class="token property">start</span><span class="token punctuation">:</span> flex-start,  <span class="token property">end</span><span class="token punctuation">:</span> flex-end,  <span class="token property">center</span><span class="token punctuation">:</span> center,  <span class="token property">between</span><span class="token punctuation">:</span> space-between,  <span class="token property">around</span><span class="token punctuation">:</span> space-around<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$key</span>, <span class="token variable">$value</span> in <span class="token variable">$jc</span> </span><span class="token punctuation">{</span>  <span class="token selector">.jc-<span class="token variable">#{$key}</span> </span><span class="token punctuation">{</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token property"><span class="token variable">$ai</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>  <span class="token property">start</span><span class="token punctuation">:</span> flex-start,  <span class="token property">end</span><span class="token punctuation">:</span> flex-end,  <span class="token property">center</span><span class="token punctuation">:</span> center,  <span class="token property">stretch</span><span class="token punctuation">:</span> stretch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$key</span>, <span class="token variable">$value</span> in <span class="token variable">$jc</span> </span><span class="token punctuation">{</span>  <span class="token selector">.ai-<span class="token variable">#{$key}</span> </span><span class="token punctuation">{</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="边距"><a href="#边距" class="headerlink" title="边距"></a>边距</h3><p>边距样式与字体样式相似，我们编译生成不同大小、不同级别、水平方向或垂直方向等的样式。比如我们生成的样式名字为 <code>mt-1</code> ，对应的样式就是 <code>margin-top</code> 一级大小的边距样式，我们可以自由设置类名。</p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// 边距类型</span><span class="token property"><span class="token variable">$spacing-types</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>  <span class="token property">m</span><span class="token punctuation">:</span> margin,  <span class="token property">p</span><span class="token punctuation">:</span> padding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 边距方向</span><span class="token property"><span class="token variable">$spacing-directions</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>  <span class="token property">t</span><span class="token punctuation">:</span> top,  <span class="token property">b</span><span class="token punctuation">:</span> bottom,  <span class="token property">l</span><span class="token punctuation">:</span> left,  <span class="token property">r</span><span class="token punctuation">:</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 基本边距大小</span><span class="token property"><span class="token variable">$spacing-base-size</span></span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 边距的倍数等级</span><span class="token property"><span class="token variable">$spacing-sizes</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>  <span class="token property">0</span><span class="token punctuation">:</span> <span class="token number">0</span>,  <span class="token property">1</span><span class="token punctuation">:</span> <span class="token number">0.25</span>,  <span class="token property">2</span><span class="token punctuation">:</span> <span class="token number">0.5</span>,  <span class="token property">3</span><span class="token punctuation">:</span> <span class="token number">1.75</span>,  <span class="token property">4</span><span class="token punctuation">:</span> <span class="token number">1.5</span>,  <span class="token property">5</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$typeKey</span>, <span class="token variable">$type</span> in <span class="token variable">$spacing-types</span> </span><span class="token punctuation">{</span>  <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$directionKey</span>, <span class="token variable">$direction</span> in <span class="token variable">$spacing-directions</span> </span><span class="token punctuation">{</span>    <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$sizeKey</span>, <span class="token variable">$size</span> in <span class="token variable">$spacing-sizes</span> </span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// m-1</span>      <span class="token selector">.<span class="token variable">#{$typeKey}</span>-<span class="token variable">#{$sizeKey}</span> </span><span class="token punctuation">{</span>        <span class="token property"><span class="token variable">#{$type}</span></span><span class="token punctuation">:</span> <span class="token variable">$spacing-base-size</span> <span class="token operator">*</span> <span class="token variable">$size</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// mx-1</span>      <span class="token selector">.<span class="token variable">#{$typeKey}</span>x-<span class="token variable">#{$sizeKey}</span> </span><span class="token punctuation">{</span>        <span class="token property"><span class="token variable">#{$type}</span>-left</span><span class="token punctuation">:</span> <span class="token variable">$spacing-base-size</span> <span class="token operator">*</span> <span class="token variable">$size</span><span class="token punctuation">;</span>        <span class="token property"><span class="token variable">#{$type}</span>-right</span><span class="token punctuation">:</span> <span class="token variable">$spacing-base-size</span> <span class="token operator">*</span> <span class="token variable">$size</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// my-1</span>      <span class="token selector">.<span class="token variable">#{$typeKey}</span>y-<span class="token variable">#{$sizeKey}</span> </span><span class="token punctuation">{</span>        <span class="token property"><span class="token variable">#{$type}</span>-top</span><span class="token punctuation">:</span> <span class="token variable">$spacing-base-size</span> <span class="token operator">*</span> <span class="token variable">$size</span><span class="token punctuation">;</span>        <span class="token property"><span class="token variable">#{$type}</span>-bottom</span><span class="token punctuation">:</span> <span class="token variable">$spacing-base-size</span> <span class="token operator">*</span> <span class="token variable">$size</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// mt-1</span>      <span class="token selector">.<span class="token variable">#{$typeKey}</span><span class="token variable">#{$directionKey}</span>-<span class="token variable">#{$sizeKey}</span> </span><span class="token punctuation">{</span>        <span class="token property"><span class="token variable">#{$type}</span>-<span class="token variable">#{$direction}</span></span><span class="token punctuation">:</span> <span class="token variable">$spacing-base-size</span> <span class="token operator">*</span> <span class="token variable">$size</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SASS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> SASS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 代码编辑器使用秘籍</title>
      <link href="/2020/01/28/vscode/"/>
      <url>/2020/01/28/vscode/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>独属于波傲天の真理之门</title>
      <link href="/2020/01/28/read-me/"/>
      <url>/2020/01/28/read-me/</url>
      
        <content type="html"><![CDATA[<h1 id="独属于波傲天の真理之门"><a href="#独属于波傲天の真理之门" class="headerlink" title="独属于波傲天の真理之门"></a>独属于波傲天の真理之门</h1><h2 id="七大罪"><a href="#七大罪" class="headerlink" title="七大罪"></a>七大罪</h2><h2 id="十诫"><a href="#十诫" class="headerlink" title="十诫"></a>十诫</h2><p>为所欲为，但勿伤害。<br>己所不欲，勿施于人。<br>可以快乐，但没必要。<br>逃避可耻，但却有用。<br>以梦为马，不负韶华。</p><h2 id="启示录-旧约"><a href="#启示录-旧约" class="headerlink" title="启示录 - 旧约"></a>启示录 - 旧约</h2><p>败犬程序员，<br>前端钢琴师，<br>自闭林不语，<br>绝望波傲天。</p><h2 id="启示录-新约"><a href="#启示录-新约" class="headerlink" title="启示录 - 新约"></a>启示录 - 新约</h2><p>卑微铲屎官，<br>全栈布道师。</p><p>非人哉，不当人。</p><p>/medias/img/truth-tree.jpg</p><p>/medias/img/fa.jpg</p><p>全知即全能，存在即合理。<br>以我之名，等价交换。</p>]]></content>
      
      
      <categories>
          
          <category> FullStack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FullStack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 开发最佳实践</title>
      <link href="/2020/01/28/vue-dev/"/>
      <url>/2020/01/28/vue-dev/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-核心"><a href="#vue-核心" class="headerlink" title="vue 核心"></a>vue 核心</h1><h2 id="声明式和命令式"><a href="#声明式和命令式" class="headerlink" title="声明式和命令式"></a>声明式和命令式</h2><h3 id="命令式"><a href="#命令式" class="headerlink" title="命令式"></a>命令式</h3><p>自己实现 for 循环</p><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3><p>MVVM 的特点：解耦 DOM 操作</p><p>forEach()</p><h2 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象原属性不存在新增的属性不会更新视图</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>函数拦截的方式重写数组的方法</p><p>通过直接改变数组的长度或索引赋值的方式不会更新视图</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>v-once 默认会缓存，以后都使用缓存的数据</p><p>v-if 绑定的 div 是无意义标签，可以使用 template 标签代替，v-show 不支持 template 标签绑定</p><p>v-html 不要和用户输入内容绑定，避免 XSS 攻击</p><p>key 是区分 DOM 元素的标识，尽量使用唯一标识</p><h2 id="计算属性-watch"><a href="#计算属性-watch" class="headerlink" title="计算属性 / watch"></a>计算属性 / watch</h2><p>计算属性有缓存，同步函数，优先考虑</p><p>watch 支持异步，监听路由等</p><p>计算属性的 getter 和 setter 应用场景：</p><p>全选和不全选依赖于 checkbox</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>mounted()中进行 ajax 请求或 DOM 操作</p><p>updated()中不要操作数据，避免死循环</p><p>befordeDestroy()中清除定时器</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件数据"><a href="#组件数据" class="headerlink" title="组件数据"></a>组件数据</h3><p>组件的数据必须是一个函数，组件复用的时候每个组件的数据是独立互不影响的</p><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><ol><li>属性传递</li><li><code>$listeners</code>和$attrs</li><li>emit</li><li><code>$parnet</code>和$child</li><li>provide 和 inject</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 响应式数据原理的基本实现</title>
      <link href="/2020/01/28/vue3-reactive/"/>
      <url>/2020/01/28/vue3-reactive/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-响应式原理的基本实现"><a href="#Vue3-响应式原理的基本实现" class="headerlink" title="Vue3 响应式原理的基本实现"></a>Vue3 响应式原理的基本实现</h1><h2 id="vue2-响应式原理的缺陷"><a href="#vue2-响应式原理的缺陷" class="headerlink" title="vue2 响应式原理的缺陷"></a>vue2 响应式原理的缺陷</h2><p>对象的数据劫持<br>对象新增属性无法被监听</p><p>数组的数据劫持<br>直接改变数组长度或通过数据索引赋值无法被监听</p><h2 id="vue3-响应式数据原理"><a href="#vue3-响应式数据原理" class="headerlink" title="vue3 响应式数据原理"></a>vue3 响应式数据原理</h2><ul><li>处理多层嵌套对象，getter 中判断是对象再递归代理</li><li>已代理对象不需要再次代理</li><li>代理对象不需要被代理</li><li>区分新增 / 修改属性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序的 Promise 风格请求接口</title>
      <link href="/2020/01/28/wx-request/"/>
      <url>/2020/01/28/wx-request/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序的网络请求"><a href="#微信小程序的网络请求" class="headerlink" title="微信小程序的网络请求"></a>微信小程序的网络请求</h1><h2 id="wx-request"><a href="#wx-request" class="headerlink" title="wx-request"></a>wx-request</h2><p>在微信小程序原生开发 Mina 框架中，我们可以使用官方的网络请求接口<code>wx-request()</code>方法发送网络请求，该方法的基本使用类似于<strong>jQuery</strong>中的发送 Ajax 请求的<code>ajax()</code>方法，<code>wx-request()</code>方法接收一个网络请求配置对象，具体使用示例可参考官方文档链接<a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html" target="_blank" rel="noopener">wx-request</a></p><h3 id="wx-request-方法使用示例"><a href="#wx-request-方法使用示例" class="headerlink" title="wx-request()方法使用示例"></a><code>wx-request()</code>方法使用示例</h3><pre class="line-numbers language-javascript"><code class="language-javascript">wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">'test.php'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//仅为示例，并非真实的接口地址</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  header<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span> <span class="token comment" spellcheck="true">// 默认值</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h3><p>原生网络请求接口<code>wx-request()</code>方法并不支持<strong>Promise API</strong>风格的调用，这也意味着当我们处理存在继发关系网络请求时候很容易出现回调函数的多重嵌套，即当我们的网络请求存在必要的先后顺序，请求处理逐级依赖嵌套，容易形成回调地狱，这样使用十分不便利。</p><pre class="line-numbers language-javascript"><code class="language-javascript">wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">''</span>http<span class="token punctuation">:</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>users<span class="token string">''</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  success <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      url<span class="token punctuation">:</span> http<span class="token punctuation">:</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>profiles'<span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> data<span class="token punctuation">.</span>id      <span class="token punctuation">}</span><span class="token punctuation">,</span>      success <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise-风格的-wx-request"><a href="#Promise-风格的-wx-request" class="headerlink" title="Promise 风格的 wx-request"></a>Promise 风格的 wx-request</h2><h3 id="方案一：自定义封装-Promise-风格的-wx-request"><a href="#方案一：自定义封装-Promise-风格的-wx-request" class="headerlink" title="方案一：自定义封装 Promise 风格的 wx-request"></a>方案一：自定义封装 Promise 风格的 wx-request</h3><p>我们可以在原生网络请求接口<code>wx-request()</code>方法的基础上封装一个<strong>Promise</strong>风格的<code>wx-request()</code>请求方法，一般我们会在项目根目录下创建一个 utils 文件夹，用于存放公共的工具文件</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  utils/wx-request.js</span><span class="token comment" spellcheck="true">// 网络请求接口的基本地址，这是一个示例</span><span class="token comment" spellcheck="true">// 更好的做法是将其单独放置在项目的配置文件中再导入进来</span><span class="token comment" spellcheck="true">// 微信小程序官方支持类似于CommonJS的模块语法</span><span class="token comment" spellcheck="true">// 你也可以使用ES2015的模块语法。小程序支持增强编译</span><span class="token keyword">const</span> baseURL <span class="token operator">=</span> <span class="token string">'http:localhost:3000'</span><span class="token comment" spellcheck="true">// 自定义wx.request()的promise版本</span><span class="token comment" spellcheck="true">// 你可以根据需要继续封装独立的get()或post()等方法</span><span class="token keyword">const</span> wxRequest <span class="token operator">=</span> options <span class="token operator">=</span><span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> fail<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 请求时候显示loading效果</span>    wx<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'拼命加载中=。=！'</span><span class="token punctuation">,</span>      mask<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> options    options<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseURL<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token operator">...</span>options<span class="token punctuation">,</span>      success<span class="token punctuation">,</span>      fail<span class="token punctuation">,</span>      <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//   请求结束隐藏loading效果</span>        wx<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> wxRequest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 更好的做法是将API单独封装到一个api文件夹中</span><span class="token keyword">import</span> wxRequest <span class="token keyword">from</span> <span class="token string">'utils/wx-request.js'</span>wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">'/users'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      url<span class="token punctuation">:</span> <span class="token string">'profiles'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        x<span class="token punctuation">:</span> value<span class="token punctuation">.</span>id      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方案二：使用-miniprogram-api-promise-包-Promise-化-API"><a href="#方案二：使用-miniprogram-api-promise-包-Promise-化-API" class="headerlink" title="方案二：使用 miniprogram-api-promise 包 Promise 化 API"></a>方案二：使用 miniprogram-api-promise 包 Promise 化 API</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -S miniprogram-api-promise<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 只需要在微信小程序入口文件app.js中调用一次promisifyAll</span><span class="token comment" spellcheck="true">// 你可以根据需求进一步封装，例如加入loading效果，单独抽离api文件夹等</span><span class="token comment" spellcheck="true">// 将wxp挂载在全局或直接导出</span><span class="token keyword">const</span> wxp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// promise化所有的wx-api接口</span><span class="token function">promisifyAll</span><span class="token punctuation">(</span>wx<span class="token punctuation">,</span> wxp<span class="token punctuation">)</span>wxp<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// promise化单个的wx-api接口</span><span class="token function">promisify</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="方案三：使用-Flyio"><a href="#方案三：使用-Flyio" class="headerlink" title="方案三：使用 Flyio"></a>方案三：使用 Flyio</h3><p><a href="https://wendux.github.io/dist/#/doc/flyio/readme" target="_blank" rel="noopener">Flyio</a>是一个类似于 axiso 的轻量且强大的 ajax 请求库，和 axios 一样，支持多种 JavaScript 运行环境 ，目前 Fly.js 支持的平台包括：浏览器 、Nodejs、Weex、React Native 和 Quick App 外，还同样兼容微信小程序，所以我们可以借助它来像使用 axios 一样在微信小程序中发送网络请求，它基于 Promise 所以天生就支持 Promise 风格 API，所以我们不用再额外处理，只需要根据具体业务逻辑进一步使用。</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>下载安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -S flyio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Fly<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../lib/wx"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//wx.js为您下载的源码文件</span><span class="token comment" spellcheck="true">// var Fly=require("flyio/dist/npm/wx") //npm引入方式</span><span class="token keyword">var</span> fly<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建fly实例</span><span class="token comment" spellcheck="true">//添加拦截器</span>fly<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>promise<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//给所有请求添加自定义header</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Tag"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"flyio"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置请求基地址</span>fly<span class="token punctuation">.</span>config<span class="token punctuation">.</span>baseURL<span class="token operator">=</span><span class="token string">"https://wendux.github.io/"</span><span class="token operator">...</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//事件处理函数</span>  bindViewTap<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用</span>    fly<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"http://10.10.180.81/doris/1/1.0.0/user/login"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>xx<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//输出请求数据</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//输出响应头</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>header<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>status<span class="token punctuation">,</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> MINA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MINA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 从入门到入土</title>
      <link href="/2020/01/28/webpack/"/>
      <url>/2020/01/28/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack-概述"><a href="#webpack-概述" class="headerlink" title="webpack 概述"></a>webpack 概述</h1><p><img src="/medias/img/webpack/webpack_03.jpg" alt=""></p><blockquote><p><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 是一个现代 javascript 应用程序的 <strong>静态模块打包器 (module bundler)</strong></p></blockquote><h2 id="webpack-能做什么"><a href="#webpack-能做什么" class="headerlink" title="webpack 能做什么"></a>webpack 能做什么</h2><p>webpack 是一个静态模块打包器</p><ol><li>语法转换<ul><li>less/sass/stylus 转换成 css</li><li>ES6 转换成 ES5</li><li>…</li></ul></li><li>html/css/js 代码压缩合并 (打包)</li><li>webpack 可以在开发期间提供一个开发环境<ul><li>自动打开浏览器</li><li>保存时自动刷新</li></ul></li><li>项目一般先打包再上线</li></ol><p><img src="/medias/img/webpack/webpack_01.jpg" alt=""></p><h1 id="webpack-的基本使用"><a href="#webpack-的基本使用" class="headerlink" title="webpack 的基本使用"></a>webpack 的基本使用</h1><h2 id="webpack-基本打包配置"><a href="#webpack-基本打包配置" class="headerlink" title="webpack 基本打包配置"></a>webpack 基本打包配置</h2><ol><li><p>建目录 dist src/main.js</p></li><li><p>初始化</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> init -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装依赖包 (-D 将依赖记录成开发依赖, 只是开发中需要用的依赖, 实际上线不需要的)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D webpack webpack-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>到 package.json 文件中, 配置 scripts</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 相当于在命名行执行 webpack -- --config webpack.config.js</span>scripts<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config webpack.config.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供 webpack.config.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 配置打包模式 生产环境压缩 production/开发环境不压缩 development</span>  mode<span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// entry: 配置打包入口文件，使用相对路径</span>  entry<span class="token punctuation">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// output: 配置打包输出文件</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打包输出的目录 (必须是绝对路径)</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 打包生成的文件名</span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行配置的 scripts 脚本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="基于-webpack-实现隔行变色"><a href="#基于-webpack-实现隔行变色" class="headerlink" title="基于 webpack 实现隔行变色"></a>基于 webpack 实现隔行变色</h2><ul><li><p>新建 public/index.html 编写代码</p></li><li><p>在 index.html 中添加 <code>&lt;li&gt;&lt;/li&gt;</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>webpack test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第1个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第2个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第3个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第4个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>需求:</p><p><strong>使用 jquery 隔行变色</strong></p><p>安装 jquery</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i jquery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>main.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#app li:nth-child(odd)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#app li:nth-child(even)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动生成-html-html-webpack-plugin-插件"><a href="#自动生成-html-html-webpack-plugin-插件" class="headerlink" title="自动生成 html - html-webpack-plugin 插件"></a><strong>自动生成 html</strong> - html-webpack-plugin 插件</h2><p>在 index.html 中 手动引入 打包后的资源，是有缺点的</p><p>比如: <strong>如果 webpack 配置中的输出文件名修改了，需要及时在 index.html 中同步修改</strong></p><ol><li><p>下载开发依赖</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D html-webpack-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>在 webpack.config.js 文件中，引入这个模块</strong> :</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入自动生成 html 的插件</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置好了之后, public 目录的 index.html 就不需要引入打包后的文件了, 会自动被插件生成 html 引入</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">"./public/index.html"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="webpack-loaders-的配置"><a href="#webpack-loaders-的配置" class="headerlink" title="webpack - loaders 的配置"></a>webpack - loaders 的配置</h1><p>webpack 默认只认识 js 文件, 但是 webpack 可以使用 <a href="https://www.webpackjs.com/concepts/loaders" target="_blank" rel="noopener">loader</a> 来加载预处理文件, 允许 webpack 也可以打包 js 之外的静态资源。</p><p>所以 webpack 如果要处理其他文件类型, <strong>记得要先配置对应的 loader</strong></p><h2 id="webpack-中处理-css-文件"><a href="#webpack-中处理-css-文件" class="headerlink" title="webpack 中处理 css 文件"></a>webpack 中处理 css 文件</h2><p>需求: 去掉小圆点, 新建 css 目录</p><ol><li><p>安装依赖</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D style-loader css-loader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// loader的规则</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 正则表达式，用于匹配所有的css文件</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 先用 css-loader 让webpack能够识别 css 文件的内容</span>      <span class="token comment" spellcheck="true">// 再用 style-loader 将样式, 以动态创建style标签的方式添加到页面中去</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="分离-css-文件"><a href="#分离-css-文件" class="headerlink" title="分离 css 文件"></a>分离 css 文件</h2><p>将 css 放到了 style 标签中, 请求次数是少了,</p><p>但是如果 css 文件太大的话，需要分离 css 文件。</p><ul><li>使用插件<code>mini-css-extract-plugin</code>，这个插件支持<code>webpack4.x</code></li><li>之前的插件<code>extract-text-webpack-plugin</code>对<code>webpack3.x</code>的版本支持 (目前已废弃)</li></ul><ol><li><p>安装依赖包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D mini-css-extract-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>在<code>webpack.config.js</code>文件中，引入这个模块</strong></p></li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入分离 css 文件的 模块</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><p>配置 loaders</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 模块加载</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// loader的规则</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 配置 css 文件的解析</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 根据官方文档写的，注意'css-loader'的书写位置</span>        <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            publicPath<span class="token punctuation">:</span><span class="token string">'../'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'css-loader'</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>插件的配置</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 配置插件</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token operator">...</span>  <span class="token comment" spellcheck="true">// 定义打包好的文件的存放路径和文件名</span>  <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         filename<span class="token punctuation">:</span><span class="token string">'css/index.css'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="webpack-中处理-less-文件"><a href="#webpack-中处理-less-文件" class="headerlink" title="webpack 中处理 less 文件"></a>webpack 中处理 less 文件</h2><ol><li><p>下载依赖包</p><p>注意: 解析 less 文件需要识别 less 语法, 所以除了 <code>less-loader</code> 需要额外下载 <code>less</code> 包</p><p>less-loader: 将 less 转换成 css</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D <span class="token function">less</span>  less-loader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 配置 less 文件的解析</span><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 分离出 css 内容</span>    <span class="token punctuation">{</span>      loader<span class="token punctuation">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          publicPath<span class="token punctuation">:</span><span class="token string">'../'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'css-loader'</span><span class="token punctuation">,</span>    <span class="token string">'less-loader'</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="webpack-中处理图片-url-loader"><a href="#webpack-中处理图片-url-loader" class="headerlink" title="webpack 中处理图片 - url-loader"></a>webpack 中处理图片 - url-loader</h2><p>使用需要转换图片的 loader 来处理图片的问题, 主要用到 <code>url-loader</code> 和 <code>file-loader</code></p><p>注意: <code>url-loader</code> 中的部分功能要用到 <code>file-loader</code>, 要下载两个模块</p><ol><li><p>下载依赖包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D url-loader file-loader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 loader</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|gif)$/i</span><span class="token punctuation">,</span>  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图片默认转成 base64 字符串了,</p><ul><li>好处就是浏览器不用发请求了，直接可以读取</li><li>坏处就是如果图片太大，再转<code>base64</code>就会让图片的体积增大 30% 左右, 得不偿失</li></ul><p>所以需要通过 options 配置选项进行配置 limit, 可以设置一个临界值, 大于这个值会整个文件直接打包到目录中, 得到是路径,</p><p>如果小于这个值, 就会转成 base64, 节约请求的次数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|gif)$/i</span><span class="token punctuation">,</span>  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 超过 8k 就不转 base64, 小于 8k 才转</span>        limit<span class="token punctuation">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="清除-dist-目录的插件"><a href="#清除-dist-目录的插件" class="headerlink" title="清除 dist 目录的插件"></a>清除 dist 目录的插件</h2><p>使用 <a href="https://www.webpackjs.com/guides/output-management/#%E6%B8%85%E7%90%86-dist-%E6%96%87%E4%BB%B6%E5%A4%B9" target="_blank" rel="noopener">clean-webpack-plugin 插件</a> 在每次打包前清除下 dist 文件夹。</p><p>安装依赖包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D clean-webpack-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>webpack.config.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 其他代码</span><span class="token comment" spellcheck="true">// 导入清除插件</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 其他配置</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// ....</span>    <span class="token comment" spellcheck="true">// 调用清除打包目录插件</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置图片的打包输出目录"><a href="#配置图片的打包输出目录" class="headerlink" title="配置图片的打包输出目录"></a>配置图片的打包输出目录</h2><p>默认是直接输出到了 dist 根目录, 可以通过 options 进行配置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|gif)$/</span><span class="token punctuation">,</span>  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 超过 8k 就不转 base64, 小于 8k 才转字符串</span>        limit<span class="token punctuation">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置输出的文件名</span>        name<span class="token punctuation">:</span> <span class="token string">'[name].[ext]'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置静态资源的引用路径</span>        publicPath<span class="token punctuation">:</span> <span class="token string">"../images/"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 配置输出的文件目录</span>        outputPath<span class="token punctuation">:</span> <span class="token string">"images/"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="webpack-开发服务器"><a href="#webpack-开发服务器" class="headerlink" title="webpack 开发服务器"></a>webpack 开发服务器</h1><h2 id="webpack-使用-babel-处理高版本的-js-语法"><a href="#webpack-使用-babel-处理高版本的-js-语法" class="headerlink" title="webpack 使用 babel 处理高版本的 js 语法"></a>webpack 使用 babel 处理高版本的 js 语法</h2><p>babel 的介绍 =&gt; 用于处理高版本 js 语法 的兼容性</p><ol><li><p>安装包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D babel-loader @babel/core @babel/preset-env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置规则</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="webpack-dev-server-自动刷新"><a href="#webpack-dev-server-自动刷新" class="headerlink" title="webpack-dev-server 自动刷新"></a>webpack-dev-server 自动刷新</h2><ol><li>下载</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D webpack-dev-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>配置 scripts</li></ol><pre class="line-numbers language-js"><code class="language-js">scripts<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --config webpack.config.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>webpack-dev-server 的配置</li></ol><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>      port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 端口号</span>      open<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 自动打开浏览器</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="生产环境-和-开发环境"><a href="#生产环境-和-开发环境" class="headerlink" title="生产环境 和 开发环境"></a>生产环境 和 开发环境</h1><p>生产环境和开发环境刚好相反，开发环境在本地运行，而生产环境是要产出<code>运行在线上服务器面向用户使用的代码</code>，因此两者的构建目标差异很大，比如打包后的文件在生产环境中要尽可能的小，逻辑代码分离，优化静态资源（压缩图片）等。</p><p><strong>因此开发环境和生产环境不能共用一份 webpack 配置文件，需要分别指定</strong></p><p>但是两个环境还是有很多配置可以共用的，比如 entry、output、module 等，因此可以把公共部分的配置抽离出来放到一个独立的文件然后进行合并，我们可以使用<code>webpack-merge</code>工具来进行合并。</p><blockquote><p><strong>注意：</strong>entry、output、module 这些配置在我们当前示例通用，但未必适合所有项目。</p></blockquote><p>安装依赖</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D webpack-merge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开始拆分<code>webpack.config.js</code>文件，拆分后这个文件就不要了。</p><p>新建<code>config</code>文件夹:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> webpack<span class="token operator">-</span>demo  <span class="token operator">-</span> config                 <span class="token comment" spellcheck="true">// 存放配置文件的文件夹</span>    <span class="token operator">-</span> webpack<span class="token punctuation">.</span>base<span class="token punctuation">.</span>js    <span class="token comment" spellcheck="true">// 公共的配置</span>    <span class="token operator">-</span> webpack<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>js    <span class="token comment" spellcheck="true">// 开发环境的配置</span>    <span class="token operator">-</span> webpack<span class="token punctuation">.</span>prod<span class="token punctuation">.</span>js    <span class="token comment" spellcheck="true">// 生成环境的配置</span>  <span class="token operator">-</span> <span class="token comment" spellcheck="true">// 其他文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>config/webpack.base.js</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 存放公共的部分</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入自动生成 html 的插件</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入分离 css 文件的 模块</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导入清除插件, 可以在每次打包之前, 清除 dist目录的内容</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置webpack的配置文件, 需要将配置的对象导出, 给webpack使用</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 入口 entry, 从哪个文件开始打包</span>  entry<span class="token punctuation">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 出口 output, 打包到哪里去</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打包输出的目录 (输出的目录必须是一个绝对路径)</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 打包后生成的文件名</span>    filename<span class="token punctuation">:</span> <span class="token string">"js/bundle.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置module模块加载规则</span>  <span class="token comment" spellcheck="true">// 默认, webpack只认识json, javascript, 不认识其他文件, 如果希望打包处理其他文件, 需要配置对应loader</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// (1) 配置css文件的解析</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 正则: 匹配所有以css结尾的文件</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 实际处理顺序: 从右往左</span>        <span class="token comment" spellcheck="true">// css-loader 让webpack能够识别解析 css 文件</span>        <span class="token comment" spellcheck="true">// style-loader 通过动态的创建style标签的方式(js), 让解析后的css内容, 能够作用到页面中</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              publicPath<span class="token punctuation">:</span> <span class="token string">"../"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">"css-loader"</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// (2) 配置less文件的解析</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              publicPath<span class="token punctuation">:</span> <span class="token string">"../"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>          <span class="token string">"less-loader"</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// (3) 配置图片文件的解析  i 表示忽视大小写  .PNG</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|gif)$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// url-loader 如果不配置, 默认都会将文件转成base64字符串的格式</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 8k以内, 转成base64, 节约请求次数, 8k以外, 单独一个文件请求</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 配置输出的文件名</span>              name<span class="token punctuation">:</span> <span class="token string">"[name].[ext]"</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 配置静态资源的引用路径</span>              publicPath<span class="token punctuation">:</span> <span class="token string">"../images/"</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 配置输出的文件目录</span>              outputPath<span class="token punctuation">:</span> <span class="token string">"images/"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// (4) 配置新版本js文件的解析</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置插件</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 自动生成 html 的插件</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">"./public/index.html"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 分离css的插件, 定义打包好的文件的e存放路径和文件名</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">"css/index.css"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 清除dist目录的插件</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>webpack.dev.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 存放开发模式下的配置 development</span><span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./webpack.base.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于合并webpack配置的插件</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-merge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// merge 可以接受多个参数, 把参数对象合并成一个对象</span><span class="token comment" spellcheck="true">// 后面的对象属性, 会覆盖前面的对象属性</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 配置开发服务器</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 端口号</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 自动打开浏览器</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>webpack.prod.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 存放生产模式的配置 production</span><span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./webpack.base.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于合并webpack配置的插件</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-merge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// merge 可以接受多个参数, 把参数对象合并成一个对象</span><span class="token comment" spellcheck="true">// 后面的对象属性, 会覆盖前面的对象属性</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">"production"</span> <span class="token comment" spellcheck="true">// 声明当前是生产环境</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong>拆分完<code>webpack.config.js</code>后可以把该文件删除了。</p></blockquote><p>修改<code>scripts</code>启动命令，<strong>注意指定配置文件的路径变化</strong></p><p><code>package.json</code></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --config config/webpack.pro.js"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --config config/webpack.dev.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="多入口多出口"><a href="#多入口多出口" class="headerlink" title="多入口多出口"></a>多入口多出口</h1><p>多入口需要修改<code>entry</code>配置，在这之前我们都是把<code>src/main.js</code>打包成<code>dist/bundle.js</code>引入到项目中，那如果有多个<code>main.js</code>类型的文件需要引入呢？ 就需要配置多入口</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span>webpack <span class="token operator">-</span> demo <span class="token operator">-</span> src <span class="token operator">-</span> index<span class="token punctuation">.</span>js <span class="token operator">-</span> about<span class="token punctuation">.</span>js<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意：</strong>index.js 和 about.js 没有任何关系，都是独立的不相互引用。</p></blockquote><p><code>src/index.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello`</span></span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>src/about.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`about`</span></span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>config/webpack.base.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 其他代码</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 用对象的方式配置多个入口</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>    about<span class="token punctuation">:</span> <span class="token string">"./src/about.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 修改输出路径和文件名，[name]是动态的，读取entry的属性</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">"js/[name].bundle.js"</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 其他代码</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们执行<code>npm run build</code>命令，可以看到 dist 的结构如下</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span>webpack <span class="token operator">-</span> demo <span class="token operator">-</span> dist <span class="token operator">-</span> js <span class="token operator">-</span> index<span class="token punctuation">.</span>bundle<span class="token punctuation">.</span>js <span class="token operator">-</span> about<span class="token punctuation">.</span>bundle<span class="token punctuation">.</span>js <span class="token operator">-</span> index<span class="token punctuation">.</span>html<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="提取公共模块"><a href="#提取公共模块" class="headerlink" title="提取公共模块"></a>提取公共模块</h2><p>当在 index 和 about 这两个独立入口文件中, 如果引入了相同的模块, 这些模块会被重复打包, 我们需要提取公共模块!</p><p>将 jquery 库分别引入到 index.js 和 about.js 中。</p><pre class="line-numbers language-jsvascript"><code class="language-jsvascript">const $ = require('jquery')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行构建命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看打包后的 <code>about.bundle.js</code> 和 <code>index.bundle.js</code> 文件源码，会发现它们都把 jquery.js 打包进去了，这样做的后果不敢想象。所以我们需要把类似<code>公共的依赖模块</code>提取到一个单独的文件中。</p><p><code>config/webpack.base.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 其他代码</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 其他代码</span>  <span class="token comment" spellcheck="true">// + 提取公共模块配置</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>      chunks<span class="token punctuation">:</span> <span class="token string">"all"</span> <span class="token comment" spellcheck="true">// 提取所有文件的共同模块</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次执行打包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到当前项目的公共模块 jquery 的内容已经被打包到一个 独立的 <code>about~index.bundle.js</code>文件中了，当然这个文件名可以<a href="https://webpack.docschina.org/plugins/split-chunks-plugin/#splitchunks-name" target="_blank" rel="noopener">通过配置</a>修改的。</p><blockquote><p><strong>注意：</strong>公共模块的大小必须大于 <code>30kb</code>才会被独立打包，jquery 的大小是 87kB。</p></blockquote><h1 id="webpack-处理-vue"><a href="#webpack-处理-vue" class="headerlink" title="webpack 处理 vue"></a>webpack 处理 vue</h1><p><img src="/medias/img/webpack/webpack_04.jpg" alt=""></p><h2 id="安装-vue"><a href="#安装-vue" class="headerlink" title="安装 vue"></a>安装 vue</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i vue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="vue-单文件组件"><a href="#vue-单文件组件" class="headerlink" title="vue 单文件组件"></a>vue 单文件组件</h2><p><strong>single-file components(单文件组件)</strong> ，文件扩展名为 <code>.vue</code> 的文件，需要安装<code>vetur</code>插件</p><p><a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">单文件组件文档</a></p><p>单文件组件的结构说明</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是单文件组件的模板内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 这是组件的js代码</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">"hello vue"</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token comment" spellcheck="true">/* 这是单文件组件的样式 */</span>  <span class="token selector">h1 </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-loader-的配置"><a href="#vue-loader-的配置" class="headerlink" title="vue-loader 的配置"></a>vue-loader 的配置</h2><p>Vue Loader 是一个 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 的 loader，它允许你以一种名为<a href="https://vue-loader.vuejs.org/zh/spec.html" target="_blank" rel="noopener">单文件组件</a>的格式撰写 Vue 组件：</p><ul><li>安装依赖包</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -D vue-loader vue-template-compiler<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>webpack 配置</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vue-loader/lib/plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// ... 其它规则</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">"vue-loader"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 请确保引入这个插件！</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>提供<code>App.vue</code>组件</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写入口文件<code>main.js</code></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// render函数用于渲染一个组件作为根组件（固定写法）</span>  <span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把App组件作为根组件</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="webpack-项目中路由的配置"><a href="#webpack-项目中路由的配置" class="headerlink" title="webpack 项目中路由的配置"></a>webpack 项目中路由的配置</h1><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ul><li>新建<code>views</code>文件夹，存放<code>Home.vue</code>组件和<code>Login.vue</code>组件</li><li>安装<code>vue-router</code></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i vue-router<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建路由实例</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./components/Home.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"./components/Login.vue"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Home <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Login <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// render函数用于渲染一个组件作为根组件（固定写法）</span>  <span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把App组件作为根组件</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  router<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抽取路由代码"><a href="#抽取路由代码" class="headerlink" title="抽取路由代码"></a>抽取路由代码</h2><p>把路由功能从<code>main.js</code>中抽取出来</p><p>新建<code>router/index.js</code>文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 配置所有的路由的功能</span><span class="token comment" spellcheck="true">// 模块化环境开发</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../components/Login.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"../components/Home.vue"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Login <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Home <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 main.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// render函数用于渲染一个组件作为根组件（固定写法）</span>  <span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把App组件作为根组件</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  router<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="vue-cli-脚手架环境"><a href="#vue-cli-脚手架环境" class="headerlink" title="vue-cli 脚手架环境"></a>vue-cli 脚手架环境</h1><p>通过学习 webpack 的配置, 我们更深入的理解了脚手架里面的一些配置原理,</p><p>下面会介绍一下, 脚手架中移动端的 rem 配置 和 反向代理配置, 这些都是实际工作中常用的</p><p>先通过脚手架创建项目</p><pre class="line-numbers language-bash"><code class="language-bash">vue create vue-mobile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在项目根目录<code>新建 vue.config.js</code>进行配置, 这个 vue.config.js 会覆盖默认 cli 的 webpack 配置, 非常方便</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行项目</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="rem-布局-插件-postcss-pxtorem-的配置"><a href="#rem-布局-插件-postcss-pxtorem-的配置" class="headerlink" title="rem 布局 - 插件 postcss-pxtorem 的配置"></a>rem 布局 - 插件 postcss-pxtorem 的配置</h2><p><a href="https://www.cnblogs.com/lml2017/p/9953429.html" target="_blank" rel="noopener">https://www.cnblogs.com/lml2017/p/9953429.html</a></p><ol><li><p>安装插件</p><pre><code>npm i lib-flexible postcss-px2rem</code></pre></li><li><p><strong>在 public 中的 index.html 中删除 meta 标签</strong></p><p>flexible 会为页面根据屏幕自动添加<code>&lt;meta name=&#39;viewport&#39; &gt;</code>标签，动态控制<code>initial-scale，maximum-scale，minimum-scale</code>等属性的值。</p></li><li><p>在 src / main.js 中导入插件包</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入 rem 的 js, 动态的设置了, 不同屏幕的html根元素的 font-size</span><span class="token keyword">import</span> <span class="token string">"lib-flexible"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置 vue.config.js</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// rem 的配置</span>  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      css<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      postcss<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"postcss-px2rem"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 适配 375 屏幕, 设计图750中量出来的尺寸要 / 2</span>            <span class="token comment" spellcheck="true">// 配置成 37.5 是为了兼容 没有适配 rem 布局的第三方 ui 库</span>            remUnit<span class="token punctuation">:</span> <span class="token number">37.5</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="反向代理的配置说明"><a href="#反向代理的配置说明" class="headerlink" title="反向代理的配置说明"></a>反向代理的配置说明</h2><p>webpack 的反向代理, 可以起一个临时的代理服务器, 帮助解决在开发过程中的跨域问题, 就算跨域了也能拿到后台的数据</p><p>安装 axios, 发送 ajax 请求</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发送请求</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`/music/getmv_by_tag?g_tk=5381&amp;loginUin=0&amp;hostUin=0&amp;format=json&amp;inCharset=utf8&amp;outCharset=GB2312&amp;notice=0&amp;platform=yqq.json&amp;needNewCode=0&amp;cmd=shoubo&amp;lan=all`</span></span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置代理 (配置 vue.config.js 文件)</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"/music"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">"https://c.y.qq.com/mv/fcgi-bin/"</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"^/music"</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// rem 的配置</span>  <span class="token comment" spellcheck="true">// ....</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿 Vue 版 MVVM 框架的简单实现</title>
      <link href="/2020/01/28/vue2-mvvm/"/>
      <url>/2020/01/28/vue2-mvvm/</url>
      
        <content type="html"><![CDATA[<p>自定义封装实现 View 框架，实现 MVVM 功能，包括模板编译、指令解析和数据（双向）绑定的功能。</p><h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>MVVM 分别指 View，Model，View-Model，View 通过 View-Model 的 DOM Listeners 将事件绑定到 Model 上，而 Model 则通过 Data Bindings 来管理 View 中的数据，View-Model 从中起到一个连接桥的作用。</p><p>在 MVVM 中 View 和 Model 是不可以直接进行通信的，它们之间存在这 ViewModel 这个中介充当着观察者的角色。当用户操作 View，ViewModel 感知到变化，然后通知 Model 发生相应改变，反之亦然。ViewModel 向上与视图层 View 进行双向数据绑定，向下与 Model 通过接口请求进行数据交互，起到承上启下的作用。</p><p><img src="/medias/img/vuejs/mvvm.jpg" alt=""></p><h2 id="概念详解"><a href="#概念详解" class="headerlink" title="概念详解"></a>概念详解</h2><ul><li>M——Model 层（数据模型 | 状态）</li></ul><p>数据模型与持久化抽象模型。数据模型很好理解，就是从服务器拉回来的 JSON 数据。而持久化抽象模型暂时放在 Model 层，是因为 MVVM 诞生之初就没有对这块进行很细致的描述。按照经验，我们通常把数据库、文件操作封装成 Model，并对外提供操作接口。</p><ul><li>V——View 层（视图层）</li></ul><p>视图展示。包含 UIView 以及 UIViewController，View 层是可以持有 ViewModel 的。</p><ul><li>VM——ViewModel（视图适配）</li></ul><p>视图适配器。暴露属性与 View 元素显示内容或者元素状态一一对应。一般情况下 ViewModel 暴露的属性建议是 readOnly 的，至于为什么，我们在实战中会去解释。还有一点，ViewModel 层是可以持有 Model 的。ViewModel 类似中转站(Value Converter)，负责转换 Model 中的数据对象，使得数据变得更加易于管理和使用。MVVM 本质就是基于操作数据来操作视图进而操作 DOM，借助于 MVVM 无需直接操作 DOM，开发者只需完成包含声明绑定的视图模板，编写 ViewModel 中有业务，使得 View 完全实现自动化。</p><h2 id="与-MVC-区别"><a href="#与-MVC-区别" class="headerlink" title="与 MVC 区别"></a>与 MVC 区别</h2><ol><li>实现了<strong>数据</strong>与<strong>视图</strong>的分离</li><li>解耦了 DOM 操作</li></ol><p>通过<strong>数据</strong>来驱动<strong>视图</strong>，开发者只需要关心数据变化，DOM 操作被封装了。</p><h2 id="实现原理-（功能）"><a href="#实现原理-（功能）" class="headerlink" title="实现原理 （功能）"></a>实现原理 （功能）</h2><ul><li>响应式数据</li></ul><p>监听 data 属性的变化，在 vue 中，依赖于 ES5 的一个方法——<code>Object.defineProperty ()</code>来实现<strong>数据劫持</strong></p><ul><li>模板编译</li></ul><p>这里主要实现了一般指令、事件指令和插值表达式的编译解析</p><ul><li>观察者模式</li></ul><p>使用了发布-订阅模式来实现数据驱动视图和数据（双向）绑定</p><p><img src="/medias/img/vuejs/vue-mvvm.jpg" alt=""></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>自定义封装实现<a href="https://gitee.com/jaylin1011/vue2-mvvm" target="_blank" rel="noopener">Vue2</a>框架，实现 MVVM 功能，包括模板编译、指令解析和数据（双向）绑定的功能。</p><h3 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h3><p>Vue2 类是核心类之一，主要实现了 MVVM 初始化和数据代理的功能</p><pre><code>class Vue2 {  constructor(options) {    const { el, data, computed, methods } = options    this.$el = el    this.$data = data    if (this.$el) {      new Observer(this.$data)      this.compileComputed(this.$data, computed)      this.compileMethods(methods)      // 数据代理vm.$data.xxx =&gt; vm.xxx      this._proxy(this.$data)      new Compile(this.$el, this)    }  }  compileComputed(data, computed) {    Object.keys(computed).forEach(key =&gt; {      Object.defineProperty(data, key, {        get: () =&gt; computed[key].call(this)      })    })  }  compileMethods(methods) {    Object.keys(methods).forEach(key =&gt; {      Object.defineProperty(this, key, {        get: () =&gt; methods[key]      })    })  }  _proxy(data) {    Object.keys(data).forEach(key =&gt; {      Object.defineProperty(this, key, {        get() {          return data[key]        },        set(newValue) {          data[key] = newValue        }      })    })  }}</code></pre><h3 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h3><p>Complile 类是核心类之一，将当前页面的所有元素节点碎片化放入内存中，编译元素节点和文本节点，解析各种相关指令，将编译完成的文档碎片从内存中取出放回页面</p><pre><code>class Compile {  constructor(el, vm) {    this.el = this.isElementNode(el) ? el : document.querySelector(el)    this.vm = vm    const fragment = this.nodeToFragment(this.el)    this.compile(fragment)    this.el.appendChild(fragment)  }  isElementNode(node) {    return node.nodeType === 1  }  isTextNode(node) {    return node.nodeType === 3  }  isDirective(attrName) {    return attrName.startsWith(&#39;v-&#39;)  }  isEventDirective(attrName) {    return attrName.startsWith(&#39;@&#39;)  }  isMustache(content) {    // return content.includes(&#39;{{&#39;)    const reg = /\{\{(.+?)\}\}/    return reg.test(content)  }  nodeToFragment(node) {    const fragment = document.createDocumentFragment()    let firstChild    // eslint-disable-next-line no-cond-assign    while (firstChild = node.firstChild) {      fragment.appendChild(firstChild)    }    return fragment  }  compile(fragment) {    // 当前模板的第一层子节点    const childNodes = fragment.childNodes;    [...childNodes].forEach(child =&gt; {      if (this.isElementNode(child)) {        this.compileElement(child)        if (child.childNodes &amp;&amp; child.childNodes.length) {          this.compile(child)        }      } else {        this.compileText(child)      }    })  }  compileElement(node) {    const attributes = node.attributes;    [...attributes].forEach(attr =&gt; {      // 根据属性获取属性名和属性值      // v-model = &#39;daisy.name&#39; =&gt; {name: &#39;v-model&#39;, value: &#39;daisy.name&#39;      const { name, value: exp } = attr      if (this.isDirective(name)) {        // 根据属性名字截取指令名字        // v-model =&gt; [&#39;v&#39;, &#39;model&#39;]        const [, directive] = name.split(&#39;-&#39;)        // 根据指令名字截取事件名字        // on:click =&gt; [&#39;on&#39;, &#39;click&#39;]        const [directiveName, eventName] = directive.split(&#39;:&#39;)        CompileUtils[directiveName](node, exp, this.vm, eventName)        // 指令编译完成后删除标签的指令属性        node.removeAttribute(`v-${directive}`)      } else if (this.isEventDirective(name)) {        const [, eventName] = name.split(&#39;@&#39;)        CompileUtils[&#39;on&#39;](node, exp, this.vm, eventName)      }    })  }  compileText(node) {    const content = node.textContent    if (this.isMustache(content)) {      CompileUtils[&#39;mustache&#39;](node, content, this.vm)    }  }}</code></pre><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><p>Observer 类是核心类之一，通过递归的方式和<code>Object.defineProperty ()</code>方法将数据响应式化，实现数据的深层劫持，监听数据的属性（此处并没有通过函数拦截的方式数组类型数据进行额外的处理）</p><pre><code>class Observer {  constructor(data) {    this.observer(data)  }  isObject(value) {    return !!value &amp;&amp; typeof value === &#39;object&#39;  }  observer(data) {    if (this.isObject(data)) {      Object.keys(data).forEach(key =&gt; this.defineReactive(data, key, data[key]))    }  }  defineReactive(target, key, value) {    // 递归劫持嵌套对象    this.observer(value)    const dep = new Dep()    Object.defineProperty(target, key, {      enumerable: true,      configurable: false,      get() {        Dep.target &amp;&amp; dep.addSub(Dep.target)        return value      },      set: (newValue) =&gt; {        if (newValue !== value) {          value = newValue          // 赋值为新对象，继续递归劫持          this.observer(value)          dep.notify()        }      }    })  }}</code></pre><h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><p>Watcher 类进行依赖收集</p><pre><code>class Watcher {  constructor(vm, exp, cb) {    this.vm = vm    this.exp = exp    this.cb = cb    // 存放老值    this.oldValue = this.getOldValue()  }  getOldValue() {    Dep.target = this    const value = CompileUtils.getValue(this.vm, this.exp)    Dep.target = null    return value  }  update() {    const newValue = CompileUtils.getValue(this.vm, this.exp)    if (newValue !== this.oldValue) {      this.cb(newValue)    }  }}</code></pre><p>Dep</p><p>Dep 类当数据更新时进行派发更新</p><pre><code>class Dep {  constructor() {    // 存放所有watcher    this.subs = []  }  // 订阅，添加watcher  addSub(watcher) {    this.subs.push(watcher)  }  // 发布  notify() {    this.subs.forEach(watcher =&gt; watcher.update())  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Promises/A+ 规范封装 PromiseA</title>
      <link href="/2018/06/27/promises-aplus/"/>
      <url>/2018/06/27/promises-aplus/</url>
      
        <content type="html"><![CDATA[<p>基于 <a href="https://promisesaplus.com/" target="_blank" rel="noopener">Promise/A+规范</a>规范自定义封装一个 <a href="https://github.com/jaylin1011/promises-aplus" target="_blank" rel="noopener">PromiseA 类</a>，实现 ECMAScript2015 中 <code>Promise</code> 的基本功能，<a href="https://gitee.com/jaylin1011/promises-aplus" target="_blank" rel="noopener">PromiseA 类</a>实现核心<code>then</code>方法，同时包括实例方法<code>catch</code>和静态方法<code>all</code>,<code>race</code>，<code>resolve</code>,<code>reject</code>等。</p><h1 id="Promises-A"><a href="#Promises-A" class="headerlink" title="Promises/A+"></a>Promises/A+</h1><p><img src="/medias/img/callback-hell.jpg" alt=""><br><code>Promise</code> 表示一个异步操作的最终结果，与之进行交互的方式主要是 <code>then</code> 方法，该方法注册了两个回调函数，用于接收 promise 的终值或本 promise 不能执行的原因。</p><p>本规范详细列出了 <code>then</code> 方法的执行过程，所有遵循 Promises/A+ 规范实现的 promise 均可以本标准作为参照基础来实施 <code>then</code> 方法。因而本规范是十分稳定的。尽管 Promise/A+ 组织有时可能会修订本规范，但主要是为了处理一些特殊的边界情况，且这些改动都是微小且向下兼容的。如果我们要进行大规模不兼容的更新，我们一定会在事先进行谨慎地考虑、详尽的探讨和严格的测试。</p><p>从历史上说，本规范实际上是把之前 Promise/A+ 规范中的建议明确成为了行为标准：我们一方面扩展了原有规范约定俗成的行为，一方面删减了原规范的一些特例情况和有问题的部分。</p><p>最后，核心的 Promises/A+ 规范不设计如何创建、解决和拒绝 promise，而是专注于提供一个通用的 <code>then</code> 方法。上述对于 promises 的操作方法将来在其他规范中可能会提及。</p><h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>promise 是一个拥有 <code>then</code> 方法的对象或函数，其行为符合本规范；</p><h2 id="thenable"><a href="#thenable" class="headerlink" title="thenable"></a>thenable</h2><p>是一个定义了 <code>then</code> 方法的对象或函数，文中译作“拥有 <code>then</code> 方法”；</p><h2 id="值（value）"><a href="#值（value）" class="headerlink" title="值（value）"></a>值（value）</h2><p>指任何 JavaScript 的合法值（包括 <code>undefined</code> , thenable 和 promise）；</p><h2 id="异常（exception）"><a href="#异常（exception）" class="headerlink" title="异常（exception）"></a>异常（exception）</h2><p>是使用 <code>throw</code> 语句抛出的一个值。</p><h2 id="据因（reason）"><a href="#据因（reason）" class="headerlink" title="据因（reason）"></a>据因（reason）</h2><p>表示一个 promise 的拒绝原因。</p><h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><hr><h2 id="Promise-的状态"><a href="#Promise-的状态" class="headerlink" title="Promise 的状态"></a>Promise 的状态</h2><p>一个 Promise 的当前状态必须为以下三种状态中的一种：<strong>等待态（Pending）</strong>、<strong>执行态（Fulfilled）</strong>和<strong>拒绝态（Rejected）</strong>。</p><h3 id="等待态（Pending）"><a href="#等待态（Pending）" class="headerlink" title="等待态（Pending）"></a>等待态（Pending）</h3><p>处于等待态时，promise 需满足以下条件：</p><ul><li>可以迁移至执行态或拒绝态</li></ul><h3 id="执行态（Fulfilled）"><a href="#执行态（Fulfilled）" class="headerlink" title="执行态（Fulfilled）"></a>执行态（Fulfilled）</h3><p>处于执行态时，promise 需满足以下条件：</p><ul><li>不能迁移至其他任何状态</li><li>必须拥有一个<strong>不可变</strong>的终值</li></ul><h3 id="拒绝态（Rejected）"><a href="#拒绝态（Rejected）" class="headerlink" title="拒绝态（Rejected）"></a>拒绝态（Rejected）</h3><p>处于拒绝态时，promise 需满足以下条件：</p><ul><li>不能迁移至其他任何状态</li><li>必须拥有一个<strong>不可变</strong>的据因</li></ul><p>这里的不可变指的是恒等（即可用 <code>===</code> 判断相等），而不是意味着更深层次的不可变（<strong>译者注：</strong>盖指当 value 或 reason 不是基本值时，只要求其引用地址相等，但属性值可被更改）。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// states</span><span class="token keyword">const</span> FULFILLED <span class="token operator">=</span> <span class="token string">"fulfilled"</span><span class="token punctuation">;</span><span class="token keyword">const</span> REJECTED <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span><span class="token keyword">const</span> PENDING <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// init state and value</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> PENDING<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// define resolve function</span><span class="token keyword">const</span> resolve <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">PromiseA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> FULFILLED<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callbackObj <span class="token operator">=</span><span class="token operator">></span> callbackObj<span class="token punctuation">.</span><span class="token function">onFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// define reject function</span><span class="token keyword">const</span> reject <span class="token operator">=</span> reason <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> REJECTED<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> reason<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callbackObj <span class="token operator">=</span><span class="token operator">></span> callbackObj<span class="token punctuation">.</span><span class="token function">onRejected</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Then-方法"><a href="#Then-方法" class="headerlink" title="Then 方法"></a><strong>Then 方法</strong></h2><p>一个 promise 必须提供一个 <code>then</code> 方法以访问其当前值、终值和据因。</p><p>promise 的 <code>then</code> 方法接受两个参数：</p><pre><code>promise.then(onFulfilled, onRejected)</code></pre><h3 id="参数可选"><a href="#参数可选" class="headerlink" title="参数可选"></a>参数可选</h3><p><code>onFulfilled</code> 和 <code>onRejected</code> 都是可选参数。</p><ul><li>如果 <code>onFulfilled</code> 不是函数，其必须被忽略</li><li>如果 <code>onRejected</code> 不是函数，其必须被忽略</li></ul><h3 id="onFulfilled-特性"><a href="#onFulfilled-特性" class="headerlink" title="onFulfilled 特性"></a><code>onFulfilled</code> 特性</h3><p>如果 <code>onFulfilled</code> 是函数：</p><ul><li>当 <code>promise</code> 执行结束后其必须被调用，其第一个参数为 <code>promise</code> 的终值</li><li>在 <code>promise</code> 执行结束前其不可被调用</li><li>其调用次数不可超过一次</li></ul><h3 id="onRejected-特性"><a href="#onRejected-特性" class="headerlink" title="onRejected 特性"></a><code>onRejected</code> 特性</h3><p>如果 <code>onRejected</code> 是函数：</p><ul><li>当 <code>promise</code> 被拒绝执行后其必须被调用，其第一个参数为 <code>promise</code> 的据因</li><li>在 <code>promise</code> 被拒绝执行前其不可被调用</li><li>其调用次数不可超过一次</li></ul><h3 id="调用时机"><a href="#调用时机" class="headerlink" title="调用时机"></a>调用时机</h3><p><code>onFulfilled</code> 和 <code>onRejected</code> 只有在<a href="http://es5.github.io/#x10.3" target="_blank" rel="noopener">执行环境</a>堆栈仅包含<strong>平台代码</strong>时才可被调用</p><h3 id="调用要求"><a href="#调用要求" class="headerlink" title="调用要求"></a>调用要求</h3><p><code>onFulfilled</code> 和 <code>onRejected</code> 必须被作为函数调用（即没有 <code>this</code> 值）</p><h3 id="多次调用"><a href="#多次调用" class="headerlink" title="多次调用"></a>多次调用</h3><p><code>then</code> 方法可以被同一个 <code>promise</code> 调用多次</p><ul><li>当 <code>promise</code> 成功执行时，所有 <code>onFulfilled</code> 需按照其注册顺序依次回调</li><li>当 <code>promise</code> 被拒绝执行时，所有的 <code>onRejected</code> 需按照其注册顺序依次回调</li></ul><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p><code>then</code> 方法必须返回一个 <code>promise</code> 对象</p><pre><code>promise2 = promise1.then(onFulfilled, onRejected);</code></pre><ul><li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 返回一个值 <code>x</code> ，则运行下面的 <strong>Promise 解决过程</strong>：<code>[[Resolve]](promise2, x)</code></li><li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 抛出一个异常 <code>e</code> ，则 <code>promise2</code> 必须拒绝执行，并返回拒因 <code>e</code></li><li>如果 <code>onFulfilled</code> 不是函数且 <code>promise1</code> 成功执行， <code>promise2</code> 必须成功执行并返回相同的值</li><li>如果 <code>onRejected</code> 不是函数且 <code>promise1</code> 拒绝执行， <code>promise2</code> 必须拒绝执行并返回相同的据因</li></ul><p><strong>译者注：</strong>理解上面的“返回”部分非常重要，即：<strong>不论 promise1 被 reject 还是被 resolve 时 promise2 都会被 resolve，只有出现异常时才会被 rejected</strong>。</p><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2.2.1 Both onFulfilled and onRejected are optional arguments</span>    onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onFulfilled <span class="token punctuation">:</span> value <span class="token operator">=</span><span class="token operator">></span> value    onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onRejected <span class="token punctuation">:</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> error <span class="token punctuation">}</span>    <span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PromiseA</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// handle sync tasks</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> FULFILLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// handle async tasks</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          onFulfilled<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// use async macro task to get promise2</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// can't handle exception in async tasks outside,so handle it inside</span>                <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>                <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          onRejected<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// use async macro task to get promise2</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// can't handle exception in async tasks outside,so handle it inside</span>                <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>                <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> promise2  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise-解决过程"><a href="#Promise-解决过程" class="headerlink" title="Promise 解决过程"></a><strong>Promise 解决过程</strong></h2><p><strong>Promise 解决过程</strong>是一个抽象的操作，其需输入一个 <code>promise</code> 和一个值，我们表示为 <code>[[Resolve]](promise, x)</code>，如果 <code>x</code> 有 <code>then</code> 方法且看上去像一个 Promise ，解决程序即尝试使 <code>promise</code> 接受 <code>x</code> 的状态；否则其用 <code>x</code> 的值来执行 <code>promise</code> 。</p><p>这种 <em>thenable</em> 的特性使得 Promise 的实现更具有通用性：只要其暴露出一个遵循 Promise/A+ 协议的 <code>then</code> 方法即可；这同时也使遵循 Promise/A+ 规范的实现可以与那些不太规范但可用的实现能良好共存。</p><p>运行 <code>[[Resolve]](promise, x)</code> 需遵循以下步骤：</p><h3 id="x-与-promise-相等"><a href="#x-与-promise-相等" class="headerlink" title="x 与 promise 相等"></a><code>x</code> 与 <code>promise</code> 相等</h3><p>如果 <code>promise</code> 和 <code>x</code> 指向同一对象，以 <code>TypeError</code> 为据因拒绝执行 <code>promise</code></p><h3 id="x-为-Promise"><a href="#x-为-Promise" class="headerlink" title="x 为 Promise"></a><code>x</code> 为 Promise</h3><p>如果 <code>x</code> 为 Promise ，则使 <code>promise</code> 接受 <code>x</code> 的状态 注 4：</p><ul><li>如果 <code>x</code> 处于等待态， <code>promise</code> 需保持为等待态直至 <code>x</code> 被执行或拒绝</li><li>如果 <code>x</code> 处于执行态，用相同的值执行 <code>promise</code></li><li>如果 <code>x</code> 处于拒绝态，用相同的据因拒绝 <code>promise</code></li></ul><h3 id="x-为对象或函数"><a href="#x-为对象或函数" class="headerlink" title="x 为对象或函数"></a><code>x</code> 为对象或函数</h3><p>如果 <code>x</code> 为对象或者函数：</p><ul><li>把 <code>x.then</code> 赋值给 <code>then</code> 注 5</li><li>如果取 <code>x.then</code> 的值时抛出错误 <code>e</code> ，则以 <code>e</code> 为据因拒绝 <code>promise</code></li><li>如果 <code>then</code> 是函数，将 <code>x</code> 作为函数的作用域 <code>this</code> 调用之。传递两个回调函数作为参数，第一个参数叫做 <code>resolvePromise</code> ，第二个参数叫做 <code>rejectPromise</code></li></ul><p>如果  <code>x</code>  不为对象或者函数，以  <code>x</code>  为参数执行  <code>promise</code></p><p>如果一个 promise 被一个循环的  <em>thenable</em>  链中的对象解决，而  <code>[[Resolve]](promise, thenable)</code>  的递归性质又使得其被再次调用，根据上述的算法将会陷入无限递归之中。算法虽不强制要求，但也鼓励施者检测这样的递归是否存在，若检测到存在则以一个可识别的  <code>TypeError</code>  为据因来拒绝  <code>promise</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// promise resolution procedure</span><span class="token keyword">const</span> resolvePromise <span class="token operator">=</span> <span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 2.3.1 promise2 === x => TypeError</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Chaining cycle detected for promise #&lt;Promise>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// x是promise</span>    <span class="token keyword">let</span> isCalled<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2.3.3.3</span>        then<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>          x<span class="token punctuation">,</span>          y <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.3.3.3.1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isCalled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            isCalled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          r <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2.3.3.3.2</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isCalled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            isCalled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2.3.3.4 x是对象</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.3.3.2 x.then出错</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isCalled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      isCalled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2.3.4 x不是promise</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ES2015 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES2015 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一条用于测试的肠粉</title>
      <link href="/2018/06/27/hello-world/"/>
      <url>/2018/06/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这是一条神奇的肠粉，因为它具有特别的纪念意义。<br>一来这是纪念本人和小铭同学一起吃过的正宗早餐。<br>二来这是本博客测试的第一条肠粉。</p><h2 id="肠粉的故事"><a href="#肠粉的故事" class="headerlink" title="肠粉的故事"></a>肠粉的故事</h2><p><img src="/medias/img/rice-roll.jpeg" alt=""><br>话说那是一个阳光灿烂的早晨。<br>男孩们约好一起恰早餐。<br>正苦恼吃啥玩意的时候。<br>一阵风带来了米浆的清香。<br>Boys 当机立断，决定选择肠粉。</p><h2 id="肠粉起源"><a href="#肠粉起源" class="headerlink" title="肠粉起源"></a>肠粉起源</h2><p>肠粉按地理（口味）区分较出名的有广州的西关肠粉，普宁肠粉，揭阳小巷里的潮汕肠粉、潮州潮汕肠粉，云浮的河口肠粉，梅州的客家肠粉，郁南的都城肠粉、澄海肠粉、饶平肠粉、惠来肠粉等。<br>广州的肠粉呈现透明状，口感比较 q 弹，一般酱料是酱油及其他酱制成，口感较甜，配菜多为生菜。潮州的肠粉呈现白色，口感香糯，酱料多为耗油花生酱，配菜各式各样。<br>潮汕肠粉各地有各地特色，比如汕头市澄海区的肠粉，酱汁比较多，酱汁的味道也比较淡，里面最常见菜是豆芽，生菜，而且还有肉末香菇鲜虾等。普宁的潮汕肠粉常见的是生蚝，香菇，白萝卜干干鱿鱼，鸡蛋，生菜，西洋菜，空心菜，肉沫，鲍鱼等。</p>]]></content>
      
      
      <categories>
          
          <category> Food </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Food </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
